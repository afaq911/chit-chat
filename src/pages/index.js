import Head from "next/head";
import Chat from "../components/Chat";
import { getSession, useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useContext, useEffect, useMemo, useState } from "react";
import Users from "../models/Users";
import db from "../utils/db";
import socket from "../utils/socket";
import { ChatContext } from "../context/chat";
import { axiosinstance } from "../utils/axiosinstance";
import { toast } from "react-toastify";

export default function Home({ allusers }) {
  const { data: session, status } = useSession();
  const Router = useRouter();
  const { setOnline, Online, CurrentCon } = useContext(ChatContext);
  const [ArrivalMessage, setArrivalMessage] = useState();

  useEffect(() => {
    socket.on("GetMessage", (message) => {
      setArrivalMessage(message);
    });
  }, []);

  useEffect(() => {
    if (ArrivalMessage?.conversationId !== CurrentCon?._id) {
      toast.success(ArrivalMessage?.message);
    }
  }, [ArrivalMessage, CurrentCon?._id]);

  useMemo(() => {
    if (status !== "loading") {
      socket.emit("Adduser", session?.user);
      socket.on("GetUsers", (users) => {
        setOnline(users);
      });
    }
  }, [session?.user, status]);

  useMemo(() => {
    const RecieveMessages = async () => {
      try {
        await axiosinstance.post(`/messages/recieved/${session?.user?.email}`);
        socket.emit("SendRecieved", {
          id: new Date(),
          message: "Message Recieved",
        });
      } catch (error) {
        console.log(error);
      }
    };

    if (Online?.some((item) => item?.email === session?.user?.email)) {
      RecieveMessages();
    }
  }, [Online, session?.user, ArrivalMessage]);

  useEffect(() => {
    if (!session?.user && status !== "loading") {
      Router.push("/login");
    }
  }, [session, Router]);

  return (
    <div>
      <Head>
        <title>ChitChat</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Chat allusers={allusers} />
    </div>
  );
}

export async function getServerSideProps(context) {
  await db.connect();
  const session = await getSession(context);
  let email = session?.user?.email;
  const allusers = await Users.find({
    email: { $ne: email },
  }).lean();
  await db.disconnect();

  return {
    props: { allusers: allusers.map(db.CovertDocToObject) },
  };
}
